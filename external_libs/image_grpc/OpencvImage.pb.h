// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpencvImage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OpencvImage_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_OpencvImage_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_OpencvImage_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OpencvImage_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_OpencvImage_2eproto;
namespace ImageTransfer {
class ImageInfo;
struct ImageInfoDefaultTypeInternal;
extern ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace ImageTransfer
PROTOBUF_NAMESPACE_OPEN
template <>
::ImageTransfer::ImageInfo* Arena::CreateMaybeMessage<::ImageTransfer::ImageInfo>(Arena*);
template <>
::ImageTransfer::Response* Arena::CreateMaybeMessage<::ImageTransfer::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ImageTransfer {

// ===================================================================


// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageTransfer.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ImageTransfer.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
    kDatalenFieldNumber = 2,
  };
  // int32 response = 1;
  void clear_response() ;
  ::int32_t response() const;
  void set_response(::int32_t value);

  private:
  ::int32_t _internal_response() const;
  void _internal_set_response(::int32_t value);

  public:
  // int32 datalen = 2;
  void clear_datalen() ;
  ::int32_t datalen() const;
  void set_datalen(::int32_t value);

  private:
  ::int32_t _internal_datalen() const;
  void _internal_set_datalen(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ImageTransfer.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t response_;
    ::int32_t datalen_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_OpencvImage_2eproto;
};// -------------------------------------------------------------------

class ImageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageTransfer.ImageInfo) */ {
 public:
  inline ImageInfo() : ImageInfo(nullptr) {}
  ~ImageInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageInfo(const ImageInfo& from);
  ImageInfo(ImageInfo&& from) noexcept
    : ImageInfo() {
    *this = ::std::move(from);
  }

  inline ImageInfo& operator=(const ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfo& operator=(ImageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageInfo* internal_default_instance() {
    return reinterpret_cast<const ImageInfo*>(
               &_ImageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageInfo& a, ImageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageInfo& from) {
    ImageInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ImageTransfer.ImageInfo";
  }
  protected:
  explicit ImageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFieldNumber = 1,
    kTimeFieldNumber = 6,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kFrameNumFieldNumber = 5,
    kTypeFieldNumber = 4,
  };
  // bytes image_data = 1;
  void clear_image_data() ;
  const std::string& image_data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_data(Arg_&& arg, Args_... args);
  std::string* mutable_image_data();
  PROTOBUF_NODISCARD std::string* release_image_data();
  void set_allocated_image_data(std::string* ptr);

  private:
  const std::string& _internal_image_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_data(
      const std::string& value);
  std::string* _internal_mutable_image_data();

  public:
  // string time = 6;
  void clear_time() ;
  const std::string& time() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time(Arg_&& arg, Args_... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* ptr);

  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(
      const std::string& value);
  std::string* _internal_mutable_time();

  public:
  // int32 height = 2;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // int32 width = 3;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int64 frame_num = 5;
  void clear_frame_num() ;
  ::int64_t frame_num() const;
  void set_frame_num(::int64_t value);

  private:
  ::int64_t _internal_frame_num() const;
  void _internal_set_frame_num(::int64_t value);

  public:
  // int32 type = 4;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ImageTransfer.ImageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
    ::int32_t height_;
    ::int32_t width_;
    ::int64_t frame_num_;
    ::int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_OpencvImage_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Response

// int32 response = 1;
inline void Response::clear_response() {
  _impl_.response_ = 0;
}
inline ::int32_t Response::response() const {
  // @@protoc_insertion_point(field_get:ImageTransfer.Response.response)
  return _internal_response();
}
inline void Response::set_response(::int32_t value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:ImageTransfer.Response.response)
}
inline ::int32_t Response::_internal_response() const {
  return _impl_.response_;
}
inline void Response::_internal_set_response(::int32_t value) {
  ;
  _impl_.response_ = value;
}

// int32 datalen = 2;
inline void Response::clear_datalen() {
  _impl_.datalen_ = 0;
}
inline ::int32_t Response::datalen() const {
  // @@protoc_insertion_point(field_get:ImageTransfer.Response.datalen)
  return _internal_datalen();
}
inline void Response::set_datalen(::int32_t value) {
  _internal_set_datalen(value);
  // @@protoc_insertion_point(field_set:ImageTransfer.Response.datalen)
}
inline ::int32_t Response::_internal_datalen() const {
  return _impl_.datalen_;
}
inline void Response::_internal_set_datalen(::int32_t value) {
  ;
  _impl_.datalen_ = value;
}

// -------------------------------------------------------------------

// ImageInfo

// bytes image_data = 1;
inline void ImageInfo::clear_image_data() {
  _impl_.image_data_.ClearToEmpty();
}
inline const std::string& ImageInfo::image_data() const {
  // @@protoc_insertion_point(field_get:ImageTransfer.ImageInfo.image_data)
  return _internal_image_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageInfo::set_image_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.image_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageTransfer.ImageInfo.image_data)
}
inline std::string* ImageInfo::mutable_image_data() {
  std::string* _s = _internal_mutable_image_data();
  // @@protoc_insertion_point(field_mutable:ImageTransfer.ImageInfo.image_data)
  return _s;
}
inline const std::string& ImageInfo::_internal_image_data() const {
  return _impl_.image_data_.Get();
}
inline void ImageInfo::_internal_set_image_data(const std::string& value) {
  ;


  _impl_.image_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageInfo::_internal_mutable_image_data() {
  ;
  return _impl_.image_data_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageInfo::release_image_data() {
  // @@protoc_insertion_point(field_release:ImageTransfer.ImageInfo.image_data)
  return _impl_.image_data_.Release();
}
inline void ImageInfo::set_allocated_image_data(std::string* value) {
  _impl_.image_data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_data_.IsDefault()) {
          _impl_.image_data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ImageTransfer.ImageInfo.image_data)
}

// int32 height = 2;
inline void ImageInfo::clear_height() {
  _impl_.height_ = 0;
}
inline ::int32_t ImageInfo::height() const {
  // @@protoc_insertion_point(field_get:ImageTransfer.ImageInfo.height)
  return _internal_height();
}
inline void ImageInfo::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ImageTransfer.ImageInfo.height)
}
inline ::int32_t ImageInfo::_internal_height() const {
  return _impl_.height_;
}
inline void ImageInfo::_internal_set_height(::int32_t value) {
  ;
  _impl_.height_ = value;
}

// int32 width = 3;
inline void ImageInfo::clear_width() {
  _impl_.width_ = 0;
}
inline ::int32_t ImageInfo::width() const {
  // @@protoc_insertion_point(field_get:ImageTransfer.ImageInfo.width)
  return _internal_width();
}
inline void ImageInfo::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ImageTransfer.ImageInfo.width)
}
inline ::int32_t ImageInfo::_internal_width() const {
  return _impl_.width_;
}
inline void ImageInfo::_internal_set_width(::int32_t value) {
  ;
  _impl_.width_ = value;
}

// int32 type = 4;
inline void ImageInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t ImageInfo::type() const {
  // @@protoc_insertion_point(field_get:ImageTransfer.ImageInfo.type)
  return _internal_type();
}
inline void ImageInfo::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ImageTransfer.ImageInfo.type)
}
inline ::int32_t ImageInfo::_internal_type() const {
  return _impl_.type_;
}
inline void ImageInfo::_internal_set_type(::int32_t value) {
  ;
  _impl_.type_ = value;
}

// int64 frame_num = 5;
inline void ImageInfo::clear_frame_num() {
  _impl_.frame_num_ = ::int64_t{0};
}
inline ::int64_t ImageInfo::frame_num() const {
  // @@protoc_insertion_point(field_get:ImageTransfer.ImageInfo.frame_num)
  return _internal_frame_num();
}
inline void ImageInfo::set_frame_num(::int64_t value) {
  _internal_set_frame_num(value);
  // @@protoc_insertion_point(field_set:ImageTransfer.ImageInfo.frame_num)
}
inline ::int64_t ImageInfo::_internal_frame_num() const {
  return _impl_.frame_num_;
}
inline void ImageInfo::_internal_set_frame_num(::int64_t value) {
  ;
  _impl_.frame_num_ = value;
}

// string time = 6;
inline void ImageInfo::clear_time() {
  _impl_.time_.ClearToEmpty();
}
inline const std::string& ImageInfo::time() const {
  // @@protoc_insertion_point(field_get:ImageTransfer.ImageInfo.time)
  return _internal_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageInfo::set_time(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.time_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageTransfer.ImageInfo.time)
}
inline std::string* ImageInfo::mutable_time() {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:ImageTransfer.ImageInfo.time)
  return _s;
}
inline const std::string& ImageInfo::_internal_time() const {
  return _impl_.time_.Get();
}
inline void ImageInfo::_internal_set_time(const std::string& value) {
  ;


  _impl_.time_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageInfo::_internal_mutable_time() {
  ;
  return _impl_.time_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageInfo::release_time() {
  // @@protoc_insertion_point(field_release:ImageTransfer.ImageInfo.time)
  return _impl_.time_.Release();
}
inline void ImageInfo::set_allocated_time(std::string* value) {
  _impl_.time_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.time_.IsDefault()) {
          _impl_.time_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ImageTransfer.ImageInfo.time)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ImageTransfer


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_OpencvImage_2eproto_2epb_2eh
